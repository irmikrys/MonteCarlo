/* Generated By:JavaCC: Do not edit this line. SyntaxCheckerConstants.java */
package org.mariuszgromada.math.mxparser.syntaxchecker;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxCheckerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LETTER = 5;
  /** RegularExpression Id. */
  int DIGIT = 6;
  /** RegularExpression Id. */
  int DIGIT19 = 7;
  /** RegularExpression Id. */
  int LETTERS = 8;
  /** RegularExpression Id. */
  int DIGITS = 9;
  /** RegularExpression Id. */
  int INTEGER = 10;
  /** RegularExpression Id. */
  int LEFT_PAR = 11;
  /** RegularExpression Id. */
  int RIGHT_PAR = 12;
  /** RegularExpression Id. */
  int PLUS = 13;
  /** RegularExpression Id. */
  int MINUS = 14;
  /** RegularExpression Id. */
  int MULTIPLY = 15;
  /** RegularExpression Id. */
  int DIV = 16;
  /** RegularExpression Id. */
  int POWER = 17;
  /** RegularExpression Id. */
  int MODULO = 18;
  /** RegularExpression Id. */
  int FACTORIAL = 19;
  /** RegularExpression Id. */
  int COMMA = 20;
  /** RegularExpression Id. */
  int SEMICOLON = 21;
  /** RegularExpression Id. */
  int EQ = 22;
  /** RegularExpression Id. */
  int UNIT = 23;
  /** RegularExpression Id. */
  int NEQ = 24;
  /** RegularExpression Id. */
  int LT = 25;
  /** RegularExpression Id. */
  int LEQ = 26;
  /** RegularExpression Id. */
  int GT = 27;
  /** RegularExpression Id. */
  int GEQ = 28;
  /** RegularExpression Id. */
  int OR = 29;
  /** RegularExpression Id. */
  int AND = 30;
  /** RegularExpression Id. */
  int NOT = 31;
  /** RegularExpression Id. */
  int BITNOT = 32;
  /** RegularExpression Id. */
  int IMP = 33;
  /** RegularExpression Id. */
  int CIMP = 34;
  /** RegularExpression Id. */
  int NIMP = 35;
  /** RegularExpression Id. */
  int CNIMP = 36;
  /** RegularExpression Id. */
  int NAND = 37;
  /** RegularExpression Id. */
  int EQV = 38;
  /** RegularExpression Id. */
  int NOR = 39;
  /** RegularExpression Id. */
  int BITWISE = 40;
  /** RegularExpression Id. */
  int XOR = 41;
  /** RegularExpression Id. */
  int CHAR = 42;
  /** RegularExpression Id. */
  int REAL = 43;
  /** RegularExpression Id. */
  int NUMBER = 44;
  /** RegularExpression Id. */
  int NUMBER_CONSTANT = 45;
  /** RegularExpression Id. */
  int IDENTIFIER = 46;
  /** RegularExpression Id. */
  int FUNCTION = 47;
  /** RegularExpression Id. */
  int INVALID_TOKEN = 50;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<LETTER>",
    "<DIGIT>",
    "<DIGIT19>",
    "<LETTERS>",
    "<DIGITS>",
    "<INTEGER>",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"#\"",
    "\"!\"",
    "\",\"",
    "\";\"",
    "<EQ>",
    "<UNIT>",
    "<NEQ>",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "<OR>",
    "<AND>",
    "\"~\"",
    "\"@~\"",
    "\"-->\"",
    "\"<--\"",
    "\"-/>\"",
    "\"</-\"",
    "<NAND>",
    "\"<->\"",
    "<NOR>",
    "<BITWISE>",
    "\"(+)\"",
    "<CHAR>",
    "<REAL>",
    "<NUMBER>",
    "<NUMBER_CONSTANT>",
    "<IDENTIFIER>",
    "<FUNCTION>",
    "\"[\"",
    "\"]\"",
    "<INVALID_TOKEN>",
    "<UNEXPECTED_CHAR>",
  };

}
